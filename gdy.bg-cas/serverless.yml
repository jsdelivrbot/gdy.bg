# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: gdybg-cas

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  stage: dev
  runtime: nodejs4.3
  region: eu-west-1

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:eu-west-1:*:*"
# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  cron:
    handler: handler.run
    events:
      - schedule: rate(15 minutes)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# {
#   "Table": {
#     "AttributeDefinitions": [
#       {
#         "AttributeName": "uri",
#         "AttributeType": "S"
#       }
#     ],
#     "TableName": "competitions",
#     "KeySchema": [
#       {
#         "AttributeName": "uri",
#         "KeyType": "HASH"
#       }
#     ],
#     "TableStatus": "ACTIVE",
#     "CreationDateTime": "2016-11-25T17:50:09.804Z",
#     "ProvisionedThroughput": {
#       "LastIncreaseDateTime": "1970-01-01T00:00:00.000Z",
#       "LastDecreaseDateTime": "1970-01-01T00:00:00.000Z",
#       "NumberOfDecreasesToday": 0,
#       "ReadCapacityUnits": 1,
#       "WriteCapacityUnits": 1
#     },
#     "TableSizeBytes": 10554,
#     "ItemCount": 34,
#     "TableArn": "arn:aws:dynamodb:ddblocal:000000000000:table/competitions"
#   }
# }

resources:
  Resources:
    CompetitionsTable:
      Type: "AWS::DynamoDB::Table"
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: uri
            AttributeType: S
        KeySchema:
          - AttributeName: uri
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "competitions"
      # SourcemetasTable:
      #   Type: "AWS::DynamoDB::Table"
      #   Properties:
      #     AttributeDefinitions:
      #       - AttributeName: name
      #         AttributeType: S
      #     KeySchema:
      #       - AttributeName: name
      #         KeyType: HASH
      #     ProvisionedThroughput:
      #       ReadCapacityUnits: 1
      #       WriteCapacityUnits: 1
      #     TableName: "sourcemetas"
