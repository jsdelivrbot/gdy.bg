# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: swagbag-club

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  stage: ${opt:stage}
  runtime: nodejs4.3
  region: eu-west-1

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
# iamRoleStatements:
#   - Effect: Allow
#     Action:
#       - dynamodb:DescribeTable
#       - dynamodb:Query
#       - dynamodb:Scan
#       - dynamodb:GetItem
#       - dynamodb:PutItem
#       - dynamodb:UpdateItem
#       - dynamodb:DeleteItem
#       - dynamodb:DescribeStream
#       - dynamodb:GetRecords
#       - dynamodb:GetShardIterator
#       - dynamodb:ListStreams
#     Resource: "arn:aws:dynamodb:eu-west-1:*:*"
# you can add packaging information here
package:
 exclude:
    - build/**
    - build.sh
    - package.json
    - processtemplate.js
 include:
    - src/**
    - node_modules/**

functions:
  scrape:
    handler: handler.scrape
    timeout: 300
    memorySize: 512
    events:
      - schedule: rate(2 hours)
      - timeout:  5 min
  getCompetitions:
    handler: handler.getCompetitions
    timeout: 30
    memorySize: 128
    events:
    - http:
        path: api/v1/competitions
        method: get
        integration: lambda
        cors: true
  getSources:
    handler: handler.getSources
    timeout: 30
    memorySize: 128
    events:
    - http:
        path: api/v1/sources
        method: get
        integration: lambda
        cors: true
  postUser:
    handler: handler.postUser
    timeout: 30
    memorySize: 128
    events:
    - http:
        path: api/v1/user
        method: post
        integration: lambda
        cors: true
  trackEntry:
    handler: handler.trackEntry
    timeout: 30
    memorySize: 128
    events:
    - http:
        path: api/v1/track
        method: post
        integration: lambda
        cors: true      
  updateClosesByDate:
    handler: handler.updateClosesByDate
    events:
    - stream: arn:aws:dynamodb:eu-west-1:730710483519:table/competitions/stream/2017-09-25T10:29:40.362
  # cron:
  #   handler: handler.run
  #   events:
  #     - schedule: rate(2 hours)
  #     - timeout:  5 min  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# {
#   "Table": {
#     "AttributeDefinitions": [
#       {
#         "AttributeName": "uri",
#         "AttributeType": "S"
#       }
#     ],
#     "TableName": "competitions",
#     "KeySchema": [
#       {
#         "AttributeName": "uri",
#         "KeyType": "HASH"
#       }
#     ],
#     "TableStatus": "ACTIVE",
#     "CreationDateTime": "2016-11-25T17:50:09.804Z",
#     "ProvisionedThroughput": {
#       "LastIncreaseDateTime": "1970-01-01T00:00:00.000Z",
#       "LastDecreaseDateTime": "1970-01-01T00:00:00.000Z",
#       "NumberOfDecreasesToday": 0,
#       "ReadCapacityUnits": 1,
#       "WriteCapacityUnits": 1
#     },
#     "TableSizeBytes": 10554,
#     "ItemCount": 34,
#     "TableArn": "arn:aws:dynamodb:ddblocal:000000000000:table/competitions"
#   }
# }

# TODO - do not let vogels mess with the tables   
# run this only the first time - when the tables do not exist    
# resources:
#   Resources:
#     CompetitionsTable:
#       Type: "AWS::DynamoDB::Table"
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: uri
#             AttributeType: S
#           # - AttributeName: daysToEnter
#           #   AttributeType: N
#         KeySchema:
#           - AttributeName: uri
#             KeyType: HASH
#           # - AttributeName: daysToEnter
#           #   KeyType: RANGE  
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         # LocalSecondaryIndexes:
#         #   - IndexName: DaysToEnterIndex
#         #     KeySchema:
#         #       - AttributeName: uri
#         #         KeyType: HASH
#         #       - AttributeName: daysToEnter
#         #         KeyType: RANGE
#         #     Projection:
#         #       NonKeyAttributes:
#         #         - img
#         #         - title
#         #         - source
#         #       ProjectionType: INCLUDE
#         TableName: "competitions"
#         TimeToLiveSpecification: 
#           AttributeName: ttl
#           Enabled: true  
#         StreamSpecification:
#           StreamViewType: NEW_AND_OLD_IMAGES
    # UserTable:
    #   Type: "AWS::DynamoDB::Table"
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: userId
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: userId
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: "user"
    # EntryTable:
    #   Type: "AWS::DynamoDB::Table"
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: uri
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: uri
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: "entry"

      
