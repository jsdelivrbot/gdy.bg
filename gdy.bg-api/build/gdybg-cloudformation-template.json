{
   "AWSTemplateFormatVersion": "2010-09-09",
   "Description": "gdy.bg API Stack (API Gateway Methods, Lambda Functions)",
   "Parameters": {
      "LambdaBucketName": {
         "Description": "The name of the S3 bucket that contains the Lambda zip and ClourdFormation template, which must be in the same region as this stack",
         "Type": "String"
      },
      "LambdaBucketKey": {
         "Description": "The file name of the source artifact, such as myfolder/myartifact.zip",
         "Type": "String"
      },
      "StageName": {
         "Description": "StageName",
         "Type": "String"
      },
      "APIBasePath": {
         "Description": "APIBasePath",
         "Type": "String"
      },
      "APIDomainName": {
         "Description": "APIDomainName",
         "Type": "String"
      }
   },
   "Resources": {
      "IamRoleLambdaExecution": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action": [
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path": "/",
            "RoleName": {
               "Fn::Join": [
                  "-",
                  [
                     "gdybg-api",
                     "dev",
                     "eu-west-1",
                     "lambdaRole"
                  ]
               ]
            }
         }
      },
      "IamPolicyLambdaExecution": {
         "Type": "AWS::IAM::Policy",
         "DependsOn": [
            "IamRoleLambdaExecution"
         ],
         "Properties": {
            "PolicyName": {
               "Fn::Join": [
                  "-",
                  [
                     "dev",
                     "gdybg-api",
                     "lambda"
                  ]
               ]
            },
            "PolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Action": [
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                     ],
                     "Resource": [
                        {
                           "Fn::Join": [
                              ":",
                              [
                                 {
                                    "Fn::GetAtt": [
                                       "GetCompetitionsLogGroup",
                                       "Arn"
                                    ]
                                 },
                                 "*"
                              ]
                           ]
                        },
                        {
                           "Fn::Join": [
                              ":",
                              [
                                 {
                                    "Fn::GetAtt": [
                                       "GetSourcesLogGroup",
                                       "Arn"
                                    ]
                                 },
                                 "*"
                              ]
                           ]
                        }
                     ]
                  }
               ]
            },
            "Roles": [
               {
                  "Ref": "IamRoleLambdaExecution"
               }
            ]
         }
      },
      "GetCompetitionsLogGroup": {
         "Type": "AWS::Logs::LogGroup",
         "Properties": {
            "LogGroupName": "/aws/lambda/gdybg-api-dev-getCompetitions"
         }
      },
      "GetSourcesLogGroup": {
         "Type": "AWS::Logs::LogGroup",
         "Properties": {
            "LogGroupName": "/aws/lambda/gdybg-api-dev-getSources"
         }
      },
      "GetCompetitionsLambdaFunction": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Code": {
               "S3Bucket": {
                  "Ref": "LambdaBucketName"
               },
               "S3Key": {
                  "Ref": "LambdaBucketKey"
               }
            },
            "FunctionName": {
               "Fn::Join": [
                  "-",
                  [
                     "gdybg",
                     {
                        "Ref": "StageName"
                     },
                     "getCompetitions"
                  ]
               ]
            },
            "Handler": "handler.getCompetitions",
            "MemorySize": 1024,
            "Role": {
               "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
               ]
            },
            "Runtime": "nodejs4.3",
            "Timeout": 6
         },
         "DependsOn": [
            "IamPolicyLambdaExecution",
            "IamRoleLambdaExecution"
         ]
      },
      "GetCompetitionsLambdaVersion0CvNe1j1OjBOrmaMUl2rVN9M4p1AkfODLMnSJBqKM": {
         "Type": "AWS::Lambda::Version",
         "DeletionPolicy": "Retain",
         "Properties": {
            "FunctionName": {
               "Ref": "GetCompetitionsLambdaFunction"
            }
         }
      },
      "GetSourcesLambdaFunction": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Code": {
               "S3Bucket": {
                  "Ref": "LambdaBucketName"
               },
               "S3Key": {
                  "Ref": "LambdaBucketKey"
               }
            },
            "FunctionName": {
               "Fn::Join": [
                  "-",
                  [
                     "gdybg",
                     {
                        "Ref": "StageName"
                     },
                     "getSources"
                  ]
               ]
            },
            "Handler": "handler.getSources",
            "MemorySize": 1024,
            "Role": {
               "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
               ]
            },
            "Runtime": "nodejs4.3",
            "Timeout": 6
         },
         "DependsOn": [
            "IamPolicyLambdaExecution",
            "IamRoleLambdaExecution"
         ]
      },
      "GetSourcesLambdaVersion0CvNe1j1OjBOrmaMUl2rVN9M4p1AkfODLMnSJBqKM": {
         "Type": "AWS::Lambda::Version",
         "DeletionPolicy": "Retain",
         "Properties": {
            "FunctionName": {
               "Ref": "GetSourcesLambdaFunction"
            }
         }
      },
      "ApiGatewayRestApi": {
         "Type": "AWS::ApiGateway::RestApi",
         "Properties": {
            "Name": "dev-gdybg-api"
         }
      },
      "ApiGatewayResourceApi": {
         "Type": "AWS::ApiGateway::Resource",
         "Properties": {
            "ParentId": {
               "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
               ]
            },
            "PathPart": "api",
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            }
         }
      },
      "ApiGatewayResourceApiV1": {
         "Type": "AWS::ApiGateway::Resource",
         "Properties": {
            "ParentId": {
               "Ref": "ApiGatewayResourceApi"
            },
            "PathPart": "v1",
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            }
         }
      },
      "ApiGatewayResourceApiV1Competitions": {
         "Type": "AWS::ApiGateway::Resource",
         "Properties": {
            "ParentId": {
               "Ref": "ApiGatewayResourceApiV1"
            },
            "PathPart": "competitions",
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            }
         }
      },
      "ApiGatewayResourceApiV1Sources": {
         "Type": "AWS::ApiGateway::Resource",
         "Properties": {
            "ParentId": {
               "Ref": "ApiGatewayResourceApiV1"
            },
            "PathPart": "sources",
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            }
         }
      },
      "ApiGatewayMethodApiV1CompetitionsOptions": {
         "Type": "AWS::ApiGateway::Method",
         "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
               {
                  "StatusCode": "200",
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true,
                     "method.response.header.Access-Control-Allow-Headers": true,
                     "method.response.header.Access-Control-Allow-Methods": true,
                     "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
               }
            ],
            "RequestParameters": {},
            "Integration": {
               "Type": "MOCK",
               "RequestTemplates": {
                  "application/json": "{statusCode:200}"
               },
               "IntegrationResponses": [
                  {
                     "StatusCode": "200",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                        "method.response.header.Access-Control-Allow-Credentials": "'false'"
                     },
                     "ResponseTemplates": {
                        "application/json": ""
                     }
                  }
               ]
            },
            "ResourceId": {
               "Ref": "ApiGatewayResourceApiV1Competitions"
            },
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            }
         }
      },
      "ApiGatewayMethodApiV1SourcesOptions": {
         "Type": "AWS::ApiGateway::Method",
         "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
               {
                  "StatusCode": "200",
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true,
                     "method.response.header.Access-Control-Allow-Headers": true,
                     "method.response.header.Access-Control-Allow-Methods": true,
                     "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
               }
            ],
            "RequestParameters": {},
            "Integration": {
               "Type": "MOCK",
               "RequestTemplates": {
                  "application/json": "{statusCode:200}"
               },
               "IntegrationResponses": [
                  {
                     "StatusCode": "200",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                        "method.response.header.Access-Control-Allow-Credentials": "'false'"
                     },
                     "ResponseTemplates": {
                        "application/json": ""
                     }
                  }
               ]
            },
            "ResourceId": {
               "Ref": "ApiGatewayResourceApiV1Sources"
            },
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            }
         }
      },
      "ApiGatewayMethodApiV1CompetitionsGet": {
         "Type": "AWS::ApiGateway::Method",
         "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
               "Ref": "ApiGatewayResourceApiV1Competitions"
            },
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            },
            "AuthorizationType": "NONE",
            "Integration": {
               "IntegrationHttpMethod": "POST",
               "Type": "AWS",
               "Uri": {
                  "Fn::Join": [
                     "",
                     [
                        "arn:aws:apigateway:",
                        {
                           "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                           "Fn::GetAtt": [
                              "GetCompetitionsLambdaFunction",
                              "Arn"
                           ]
                        },
                        "/invocations"
                     ]
                  ]
               },
               "PassthroughBehavior": "NEVER",
               "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
               },
               "IntegrationResponses": [
                  {
                     "StatusCode": 200,
                     "SelectionPattern": "",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 400,
                     "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 401,
                     "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 403,
                     "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 404,
                     "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 422,
                     "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 500,
                     "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 502,
                     "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 504,
                     "SelectionPattern": "[\\s\\S]*\\[504\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  }
               ]
            },
            "MethodResponses": [
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 401
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 403
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 404
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 422
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 500
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 502
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 504
               }
            ]
         }
      },
      "ApiGatewayMethodApiV1SourcesGet": {
         "Type": "AWS::ApiGateway::Method",
         "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
               "Ref": "ApiGatewayResourceApiV1Sources"
            },
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            },
            "AuthorizationType": "NONE",
            "Integration": {
               "IntegrationHttpMethod": "POST",
               "Type": "AWS",
               "Uri": {
                  "Fn::Join": [
                     "",
                     [
                        "arn:aws:apigateway:",
                        {
                           "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                           "Fn::GetAtt": [
                              "GetSourcesLambdaFunction",
                              "Arn"
                           ]
                        },
                        "/invocations"
                     ]
                  ]
               },
               "PassthroughBehavior": "NEVER",
               "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
               },
               "IntegrationResponses": [
                  {
                     "StatusCode": 200,
                     "SelectionPattern": "",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 400,
                     "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 401,
                     "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 403,
                     "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 404,
                     "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 422,
                     "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 500,
                     "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 502,
                     "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  },
                  {
                     "StatusCode": 504,
                     "SelectionPattern": "[\\s\\S]*\\[504\\][\\s\\S]*",
                     "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                     },
                     "ResponseTemplates": {}
                  }
               ]
            },
            "MethodResponses": [
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 401
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 403
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 404
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 422
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 500
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 502
               },
               {
                  "ResponseParameters": {
                     "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 504
               }
            ]
         }
      },
      "ApiGatewayDeployment1489701023639": {
         "Type": "AWS::ApiGateway::Deployment",
         "Properties": {
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            },
            "StageName": "Default"
         },
         "DependsOn": [
            "ApiGatewayMethodApiV1CompetitionsGet",
            "ApiGatewayMethodApiV1SourcesGet"
         ]
      },
      "GetCompetitionsLambdaPermissionApiGateway": {
         "Type": "AWS::Lambda::Permission",
         "Properties": {
            "FunctionName": {
               "Fn::GetAtt": [
                  "GetCompetitionsLambdaFunction",
                  "Arn"
               ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
               "Fn::Join": [
                  "",
                  [
                     "arn:aws:execute-api:",
                     {
                        "Ref": "AWS::Region"
                     },
                     ":",
                     {
                        "Ref": "AWS::AccountId"
                     },
                     ":",
                     {
                        "Ref": "ApiGatewayRestApi"
                     },
                     "/*/*"
                  ]
               ]
            }
         }
      },
      "GetSourcesLambdaPermissionApiGateway": {
         "Type": "AWS::Lambda::Permission",
         "Properties": {
            "FunctionName": {
               "Fn::GetAtt": [
                  "GetSourcesLambdaFunction",
                  "Arn"
               ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
               "Fn::Join": [
                  "",
                  [
                     "arn:aws:execute-api:",
                     {
                        "Ref": "AWS::Region"
                     },
                     ":",
                     {
                        "Ref": "AWS::AccountId"
                     },
                     ":",
                     {
                        "Ref": "ApiGatewayRestApi"
                     },
                     "/*/*"
                  ]
               ]
            }
         }
      },
      "LambdaExecutionRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action": [
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "ManagedPolicyArns": [
               "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
               "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
            ],
            "Policies": [
               {
                  "PolicyName": "root",
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [
                        {
                           "Action": [
                              "dynamodb:DescribeTable",
                              "dynamodb:Query",
                              "dynamodb:Scan",
                              "dynamodb:GetItem",
                              "dynamodb:PutItem",
                              "dynamodb:UpdateItem",
                              "dynamodb:DeleteItem"
                           ],
                           "Effect": "Allow",
                           "Resource": "*"
                        }
                     ]
                  }
               }
            ]
         }
      },
      "ApiStage": {
         "Type": "AWS::ApiGateway::Stage",
         "Properties": {
            "CacheClusterEnabled": true,
            "CacheClusterSize": "0.5",
            "DeploymentId": {
               "Ref": "ApiGatewayDeployment1489701023639"
            },
            "MethodSettings": [
               {
                  "ResourcePath": "/*/",
                  "HttpMethod": "GET",
                  "CachingEnabled": true,
                  "CacheTtlInSeconds": 3600
               }
            ],
            "RestApiId": {
               "Ref": "ApiGatewayRestApi"
            },
            "StageName": {
               "Ref": "StageName"
            }
         }
      }
   },
   "Outputs": {
      "GetCompetitionsLambdaFunctionQualifiedArn": {
         "Description": "Current Lambda function version",
         "Value": {
            "Ref": "GetCompetitionsLambdaVersion0CvNe1j1OjBOrmaMUl2rVN9M4p1AkfODLMnSJBqKM"
         }
      },
      "GetSourcesLambdaFunctionQualifiedArn": {
         "Description": "Current Lambda function version",
         "Value": {
            "Ref": "GetSourcesLambdaVersion0CvNe1j1OjBOrmaMUl2rVN9M4p1AkfODLMnSJBqKM"
         }
      },
      "ServiceEndpoint": {
         "Description": "URL of the service endpoint",
         "Value": {
            "Fn::Join": [
               "",
               [
                  "https://",
                  {
                     "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.eu-west-1.amazonaws.com/dev"
               ]
            ]
         }
      }
   }
}
